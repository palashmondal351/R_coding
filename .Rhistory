years
names()
names
years("P")
years["P"]
years["P"]
v1-mean(v1)
rm(x,y)
cv=function(x) sd(x)/mean(x)
cv(1:10)
gcd=function(a,b){}
gcd=function(a,b){}
gcd=function(a,b){ }
gcd=function(a,b){if(b==0) return(a)+}
gcd=function(a,b){if(b==0) return(a) else return(gcd(b,a%%b))}
gcd(2,7)
gcd(5,7)
gcd(15,12)
a=2;b=3
print(a+b)
rm(fum)
c=c(2,3,4,5+)
c=c(2,3,4,5,+)
#Fatten a list into a vector
v
print(typeof(v))
#Fatten a list into a vector
mean(v)
#Fatten a list into a vector
elelist=list(c(1,2,3,4,5,9,8,7,6))
mean(elelist)
mean(unlist(elelist)
mean(unlist(elelist))
#Fatten a list into a vector
elelist=list(c(1,2,3,4,5,9,8,7,6))
mean(unlist(elelist))
# Removing null element from a list
list=c(1:6)
list=c(1:6)
list[10]=10
list
list[sapply(list, is.null)]=NULL
print(list)
# Removing null element from a list
list=c(1:6)
list[10]=10
list #now list have NA element
list[sapply(list, is.null)]=NULL
print(list)
print(list[sapply(list, is.null)]=NULL)
lis=c(1:6)
lis[10]=10
print(lis) #now list have NA element
print(lis[sapply(lis, is.null)]=NULL)
# Removing null element from a list
lis=list(c(1:6))
lis[10]=10
print(lis) #now list have NA element
print(lis[sapply(lis, is.null)]=NULL)
lis[sapply(lis, is.null)]=NULL
lis[sapply(lis, is.null)]=NULL
View(lis)
lis=list(c(1:6))
lis[10]=10
print(lis) #now list have NA element
lis[sapply(lis, is.null)]=NULL
# Removing null element from a list
lis=list(c(1:6))
View(lis)
View(lis)
lis[10]=10
View(lis)
View(lis)
lis[sapply(lis, is.null)]=NULL
View(lis)
View(lis)
# Removing list element with condition
l=list(c(1,3,5,7,9, 0,NA))
print(l)
# Removing list element with condition
l=list(c(-5,-3,-1,0,1,3,5,7,9, 0,NA))
print(l)
l[l<0]=NULL
View(l)
View(l)
View(l)
View(l)
# Removing list element with condition
l=list(c(-5,-3,-1,0,1,3,5,7,9, 0,NA))
print(l)
# Removing list element with condition
l=list(-5,-3,-1,0,1,3,5,7,9, 0,NA)
print(l)
l[l<0]=NULL
print(l)
l[is.na(l)]=NULL # Remove all the NA value form list
print(l)
# MATRIX
m=c(1:12)
mat=matrix(m,2,3)
print(mat)
mat=matrix(m,4,3)
print(mat)
mat=matrix(NA,4,3)
print(mat)
mat=matrix(NA,3,4)
print(mat)
m=c(1:12)
mat=matrix(m,5,6)
print(mat)
mat=matrix(0,3,4) # NA element matrix of 3*4 dimension
print(mat)
m=c(1:12)
mat=matrix(m,4,3,byrow = TRUE)
print(mat)
# matrix operation
t(mat)
solve(mat)
?solve
# MATRIX
m=c(1:16)
mat=matrix(m,4,4,byrow = TRUE) # Matrix follws by default column order
solve(mat)
View(mat)
View(mat)
mat%*%matrix(0,3,4)
mat2=matrix(0,3,4)
mat%*%mat2
print(mat2)
print(mat)
mat%*%mat2
mat %*% mat2
diag(4)
mat*mat2
mat**mat2
mat %*% mat2
mat*mat2
# MATRIX
m=c(1:16)
mat=matrix(m,3,4,byrow = TRUE) # Matrix follws by default column order
# MATRIX
m=c(1:12)
mat=matrix(m,3,4,byrow = TRUE) # Matrix follws by default column order
print(mat)
mat2=matrix(0,3,4)
mat*mat2
mat %*% mat2
mat * mat2
mat2=matrix(c(10:22),3,4)
mat2=matrix(10:22,3,4)
mat2=matrix(c(10:22),3,4)
c(10:22)
# MATRIX
m=c(1:12)
m
k=c(10:22)
mat2=matrix(k,3,4)
k=c(10:22)
k
k=c(11:22)
mat2=matrix(k,3,4)
mat * mat2 # mat %*% mat2 matrix element wise multiplication
mat2=matrix(c(11:22),3,4)
mat * mat2 # mat %*% mat2 matrix element wise multiplication
mat %*% mat2
print(mat)
# MATRIX
m=c(1:12)
mat=matrix(m,3,4,byrow = TRUE) # Matrix follws by default column order
print(mat)
# given row and column name to a matrix
rownames(mat)=c('r1','r2','r3')
colnames(mat)=c('c1','c2','c3','c4')
print(mat)
# selecting row or columns in a marix
print(mat[1,]) # first row of matrix mat
print(mat[,3]) # third column of matrix mat
print(mat[1,,drop=FALSE]) # first row of matrix mat wih element position
print(mat[1,,drop=FALSE]) # first row of matrix mat wih element position
print(mat[,3,drop=FALSE]) # third column of matrix mat with element position
# selecting row or columns in a marix
print(mat[1,]) # first row of matrix mat
print(mat[,3]) # third column of matrix mat
print(mat[1,,drop=FALSE]) # first row of matrix mat wih element position
print(mat[,3,drop=FALSE]) # third column of matrix mat with element position
# Data frame from column data
dfrm=Genescan.fram(Sample, file, Size)
# Data frame from column data
dfrm=Genescan.txt.fram(Sample, file, Size)
# Data frame from column data
dfrm=mat.fram(c1,c2,c3)
library(readr)
dataset <- read_csv(NULL)
View(dataset)
mat
newrow=data.frame(c1=13,c2=14,c3=15,c4=16)
mat=rbind(mat,newrow)
mat
newrow=data.frame(c1=13,c2=14,c3=15,c4=16) # row that we want to append in mat data set
mat=rbind(mat,newrow)
print(mat) # get a appended row data set or new row newrow
newcol=data.frame(r1=11,r2=22,r3=33,r4=44, r5=55)
mat=cbind(mat,newcol)
print(mat)
newcol=data.frame(11,21,31,41,51)
cbind(mat,newcol)
print(mat)
newcol=data.frame(11,21,31,41,51)
mat=cbind(mat,newcol)
print(mat)
newcol=c(101,201,301,401,501)
mat=cbind(mat,newcol)
print(mat)
c5=c(101,201,301,401,501)
mat=cbind(mat,newcol)
print(mat)
c5=c(101,201,301,401,501)
mat=cbind(mat,c5)
print(mat)
m=c(1:12)
mat=matrix(m,3,4,byrow = TRUE) # Matrix follws by default column order
print(mat)
rownames(mat)=c('r1','r2','r3')
colnames(mat)=c('c1','c2','c3','c4')
print(mat)
# Data frame from column data
r4=data.frame(13,14,15,16) # row that we want to append in mat data set
mat=rbind(mat,newrow)
print(mat) # get a appended row data set or new row newrow
m=c(1:12)
mat=matrix(m,3,4,byrow = TRUE) # Matrix follws by default column order
print(mat)
rownames(mat)=c('r1','r2','r3')
colnames(mat)=c('c1','c2','c3','c4')
print(mat)
r4=data.frame(13,14,15,16) # row that we want to append in mat data set
mat=rbind(mat,r4)
# Data frame from column data
r4=data.frame(13,14,15,16) # row that we want to append in mat data set
mat=rbind(mat,r4)
c5=c(101,201,301,401,501)
mat=cbind(mat,c5)
print(mat)
# Data frame from column data
r4=data.frame(13,14,15,16,17) # row that we want to append in mat data set
mat=rbind(mat,r4)
print(mat) # get a appended row data set or new row newrow
# Data frame from column data
r4=data.frame(c1=13,c2=14,c3=15,c4=16,c5=17) # row that we want to append in mat data set
mat=rbind(mat,r4)
print(mat) # get a appended row data set or new row newrow
#7.8 Getting the current date
Sys.Date()
class(Sys.Date())
#Convert a string into a Date
as.Date(Sys.Date())
as.Date("9/12/2019", foramt='%m%d%Y')
#Converting year, month, date into date
ISOdate(2019,9,29)
as.Date(ISOdate(2019,9,12))
year=c(2017,2018,2019)
month=c(1,2,3)
date=c(14,15,16)
ISOdate(year,month,date)
as.Date(ISOdate(year,month,date))
#7.12 Getting the Julian Date
d=as.Date('2010-03-15')
as.integer(d)
julian(d)
# 7.13 Extracting the part of Date
d$mday
d=as.Date('2010-03-15')
p=as.POSIXlt(d)
d$mday
p$mday
p$mday
p$mon
p$year+1970
p$mday
p$mon
p$year+1970
p$year+1900
seq(from=s, to=e, by=1)
s=as.Date('2019-09-01')
e=as.Date('2019-09-12')
seq(from=s, to=e, by=1)
seq(from=s,by='month',length.out = 12)
seq(from=s,by='3 month',length.out = 4)
?pnorm
?dnorm
#8.1 COUNTING THE NUMBER OF COMBINATIONS
choose(5,3)  # way of combination 3 out of 5
choose(50,5)
choose(50,10)
choose(50,40)
# GENERATING COMBINATIONS
combn(1:5,3)
# 8.3 GENERATING RANDOM NUMBER
runif(1)
# 8.3 GENERATING RANDOM NUMBER
runif(10)
runif(5,min = -5,max = 5)
runif(5,min = -5,max = 5)
rnorm(1) # one standard normal variate
rnorm(1,mean=100, sd=15)
rbinom(1,size = 10, prob = 0.5) # one binomal variate
rpois(1,lambda = 10) # one poison variate
rexp(1,rate = 0.1)
rgamma(1,shape = 2,rate = 0.1)
set.seed(165)
runif(10)
runif(10)
set.seed(165)
runif(10)
library(Mass)
data(Cars99)
library(MASS)
data(Cars93)
sample(Cars93$Min.Price,10) # 10 sample from Cars93 data
sample(Cars93$Min.Price,10) # 10 sample from Cars93 data
# 8.6  Generating random Sequence
sample(c('H','T'),10)
# 8.6  Generating random Sequence
sample(c('H','T'),10, replace = TRUE)
sample(c('H','T'),10, replace = TRUE, prob = c(0.2,0.8))
rbinom(10,1,0.8)
rbinom(10,1,0.8) # random binomial of 10 number of probablity 0.8
# 8.7 RANDOMLY PERMUTING A VECTOR
sample(1,10)
sample(1,10)
# 8.7 RANDOMLY PERMUTING A VECTOR
sample(1:10)
#8.8 CALCULATING PROBABLITIES FOR DISTRIBUTION PROBABLITIES.
dbinom(7,size = 10, prob = 0.5)
pbinom(7,size = 10, prob = 0.5) # cumulative probablity of binomial distribution
#8.9 CALCULATING PROBABLITIES OF CONTINEOUS DISTRIBUTIONS
pnorm(66, mean = 70, sd=3)
pexp(20, rate = 1/40) # exponential probablity
# 8.10 CONVERTING PROBABILISTIC TO QUANTILES
qnorm(0.05, mean = 100, sd=15)
#8.11 PLOTING A DENSITY FUNCTION
x=seq(from=-3, to+=3, length.out=100)
#8.11 PLOTING A DENSITY FUNCTION
x=seq(from=-3, to=+3, length.out=100)
plot(x,dnorm(x))
#8.11 PLOTING A DENSITY FUNCTION
x=seq(from=-3, to=+3, length.out=50)
plot(x,dnorm(x))
#8.11 PLOTING A DENSITY FUNCTION
x=seq(from=-3, to=+3, length.out=200)
plot(x,dnorm(x))
#8.11 PLOTING A DENSITY FUNCTION
x=seq(from=-3, to=+3, length.out=100)
plot(x,dnorm(x))
X=seq(from=0, to=10, length.out=100)
ylim=c(0,0.6)
plot(X,dgamma(X,shape = 2, rate = 1),main = 'Gamma', type =  '1', ylim = ylim)
plot(X,dgamma(X,shape = 2, rate = 1),main = 'Gamma', type =  'l', ylim = ylim)
par(mflow=c(2,2))
X=seq(from=0, to=10, length.out=100)
ylim=c(0,0.6)
plot(X,dgamma(X,shape = 2, rate = 1),main = 'Gamma', type =  'l', ylim = ylim)
plot(X,dunif(X,min = 2, max = 4),main = 'Uniform', type =  'l', ylim = ylim)
plot(X,dnorm(X, mean = 3, sd = 1),main = 'Normal', type =  'l', ylim = ylim)
plot(X,dexp(X, rate = 1/2),main = 'Exponential', type =  'l', ylim = ylim)
plot(X,dgamma(X,shape = 2, rate = 1),main = 'Gamma', type =  'l', ylim = ylim)
# Gamma function
plot(X,dunif(X,min = 2, max = 4),main = 'Uniform', type =  'l', ylim = ylim)
plot(X,dnorm(X, mean = 3, sd = 1),main = 'Normal', type =  'l', ylim = ylim)
plot(X,dexp(X, rate = 1/2),main = 'Exponential', type =  'l', ylim = ylim)
plot(X,dgamma(X,shape = 2, rate = 1),main = 'Gamma', type =  'l', ylim = ylim)
x <- rbeta(1000, 1, 4)
system.time( for(i in 1:1000) beta.mle(x) )
beta.mle(x)
x <- rbeta(1000, 1, 4)
system.time( for(i in 1:1000) beta.mle(x) )
install.packages("mle.tools")
library(mle.tools)
x <- rbeta(1000, 1, 4)
system.time( for(i in 1:1000) beta.mle(x) )
beta.mle(x)
install.packages("mle.tools")
library(mle.tools)
x <- rbeta(1000, 1, 4)
system.time( for(i in 1:1000) beta.mle(x) )
beta.mle(x)
x
system.time( for(i in 1:1000) beta.mle(x) )
beta.mle(x)
x <- rbeta(1000, 1, 4)
beta.mle(x)
??beta.mle
?mle
??mle
install.packages("MLEcens")
install.packages("mle.tools")
library(mle.tools)
th = 5;  n = 10
th.mle = -n/replicate(10^6, sum(log(rbeta(n, th, 1))))
mean(th.mle)
## 5.555069   # aprx expectation of th.mle > th = 5.
median(th.mle)
## 5.172145
th.mle
plot(th.mle)
## 5.1721
plot(th.mle)
attach(faithful)     # attach the data frame
eruption.lm = lm(eruptions ~ waiting)
newdata = data.frame(waiting=80)
predict(eruption.lm, newdata, interval="confidence")
predict(eruption.lm, newdata, interval=95)
confint(eruption.lm, newdata, level=0.95)
attach(faithful)     # attach the data frame
eruption.lm = lm(eruptions ~ waiting)
newdata = data.frame(waiting=80)
attach(faithful)     # attach the data frame
eruption.lm = lm(eruptions ~ waiting)
newdata = data.frame(waiting=80)
predict(eruption.lm, newdata, interval="confidence")
confint(eruption.lm, newdata, level=0.95)
typeof(eruption.lm)
typeof(newdata)
library(ISwR)
fit <- lm(metabolic.rate ~ body.weight, rmr)
install.packages("ISwR")
library(ISwR)
fit <- lm(metabolic.rate ~ body.weight, rmr)
summary(fit)
confint(fit, 'body.weight', level=0.95)
k=confint(fit, 'body.weight', level=0.95)
k
k[1]
k[2]
typeof(fit)
typeof('body.weight')
k=confint(fit, 5, level=0.95)
k
typeof(rmr$metabolic.rate)
typeof(rmr$body.weight)
rmr$body.weight
# Prior parameters
a = 1;
b = 1;
# Data
N = 10;
X = 1;
theta = linspace(0,1,100);
Y_prior = betapdf(theta,a,b);
?triplot
??tryplot
triplot
?triplot
??triplot
triplot(prior,data,where="topright")
install.packages("triplot")
triplot(prior,data,where="topright")
??triplot
install.packages("ade4")
library(ade4)
triplot(prior,data,where="topright")
help.search('arima', fields=c('triplot'), ignore.case=FALSE, agrep=FALSE)
help.search('triplot', fields=c('triplot'), ignore.case=FALSE, agrep=FALSE)
install.packages("sos")
library(sos)
findFn('triplot')
install.packages("klaR")
triplot(prior,data,where="topright")
library(kIaR)
library(klaR)
triplot(prior,data,where="topright")
data
prior=c(3,10)  # proportion has a beta(3, 10) prior
data=c(10,6)   # observe 10 successes and 6 failures
triplot(prior,data)
library(LearnBayes)
install.packages("LearnBayes")
library(LearnBayes)
triplot(prior,data,where="topright")
prior=c(3,10)  # proportion has a beta(3, 10) prior
data=c(10,6)   # observe 10 successes and 6 failures
triplot(prior,data)
triplot(prior,data,where="topright")
#prior=c(3,10)  # proportion has a beta(3, 10) prior
data=c(10,6)   # observe 10 successes and 6 failures
triplot(prior,data)
triplot(posterior,data,where="topright")
prior
triplot(prior,data,where="topright")
triplot(prior,data,where="topright")
data=c(10,6)   # observe 10 successes and 6 failures
triplot(prior,data)
remove(data)
remove(triplot)
remove(prior)
remove(data)
data=c(10,6)   # observe 10 successes and 6 failures
triplot(prior,data)
prior=c(3,10)  # proportion has a beta(3, 10) prior
triplot(prior,data)
triplot(prior,data,where="topright")
?triplot
triplot(prior,data,legend.position = c(0.8, 0.2))
triplot(prior,data)
setwd("~/R/Rpractice")
1:100
c(1:100)
c(1:100)
m=matrix(1:100,2,2)
m
a=seq(1,60,2)
a
